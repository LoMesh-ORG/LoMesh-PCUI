#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 4.22
#  in conjunction with Tcl version 8.6
#    Apr 21, 2019 07:41:25 PM EDT  platform: Windows NT
#    Apr 21, 2019 07:53:15 PM EDT  platform: Windows NT
#    Apr 21, 2019 08:24:15 PM EDT  platform: Windows NT
#    Apr 21, 2019 09:21:19 PM EDT  platform: Windows NT
#    Apr 22, 2019 12:06:17 AM EDT  platform: Windows NT
#    Apr 22, 2019 12:08:32 AM EDT  platform: Windows NT
#    Apr 27, 2019 12:26:00 PM EDT  platform: Windows NT
#    Apr 27, 2019 03:32:43 PM EDT  platform: Windows NT
#    Apr 27, 2019 03:39:44 PM EDT  platform: Windows NT
#    Apr 27, 2019 05:38:45 PM EDT  platform: Windows NT
#    Aug 23, 2019 06:09:39 PM EDT  platform: Windows NT

import sys
import serial
import serial.tools.list_ports
import re
import time
from tkinter import filedialog
import subprocess

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False

except ImportError:
    import tkinter.ttk as ttk
    py3 = True
    

def bootload():
    global w, top_level, root
    try:
        filename = filedialog.askopenfilename(initialdir = "/",title = "Select hex file to load",filetypes = (("hex files","*.hex"),))
        print(filename)
        if(filename):
            cmd = "python bootloader.py " + filename + " " + Combobox_COMText.get() + " " + "115200"
            print(cmd)
            subprocess.call(cmd, shell=True)
    except Exception as e:
        print("Error in bootloading the device " + str(e))

def softReset():
    global w, top_level, root
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:
            ser.write(b'AT+RST\r\n')
    except Exception as e:
        print("Error in resetting the device " + str(e))
    sys.stdout.flush()    

def bcastMessage():
    #Send message as a broadcast
    global w, top_level, root      
    global Packet    
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:   
            value = Packet.get()
            if(len(value) < 64):
                ser.write(b'AT+BCAST=' + str(value).encode('utf-8') + b'\r\n')
            
    except Exception as e:
        print("Error in sending broadcast " + str(e))
    sys.stdout.flush()

def recvMessage():
    #Read the last message
    global w, top_level, root
    global RXTXShortID   
    global Packet    
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:
            ser.reset_input_buffer()
            ser.write(b'AT+RECV\r\n')
            data = ser.read_until().decode('utf-8')
            RXTXShortID.set(data.split(":")[0])
            result = re.search('%s(.*)%s' % (":", "\r"), data).group(1)
            print(result)
            Packet.set(result)
            
    except Exception as e:
        print("Error in getting last message " + str(e))
    sys.stdout.flush()

def sendMessage():
    global w, top_level, root      
    global RXTXShortID   
    global Packet  
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:   
            value = Packet.get()
            dest = RXTXShortID.get()[0:4]
            if(len(value) < 64):
                ser.write(b'AT+SEND:' + str(dest).encode('utf-8') + b'=' + str(value).encode('utf-8') + b'\r\n')
            
    except Exception as e:
        print("Error in sending broadcast " + str(e))
    sys.stdout.flush()

def sendSinkMessage():
    global w, top_level, root            
    global Packet  
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:   
            value = Packet.get()
            if(len(value) < 64):
                ser.write(b'AT+SSINK=' + str(value).encode('utf-8') + b'\r\n')
            
    except Exception as e:
        print("Error in sending message to sink " + str(e))
    sys.stdout.flush()

def setSink():
    #Set this device as a data sink
    global w, top_level, root        
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:
            ser.write(b'AT+SETSINK\r\n')            
            
    except Exception as e:
        print("Error in setting device as sink " + str(e))
    sys.stdout.flush()

    

def resetCADCounter():
    #Send reset the CAD counter
    global w, top_level, root
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:
            ser.write(b'AT+CADCOUNTERRST\r\n')
    except Exception as e:
        print("Error in reset the CAD counter " + str(e))
    sys.stdout.flush()

def writeData():
    global w, top_level, root
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 1) as ser:
            #Set Network Address
            try:
                global NADDR_Text
                value = NADDR_Text.get()[0:2]
                int(value,16)
                #Code reached here so the value must be valid                 
                ser.write(b'AT+NADDR=' + value.encode('utf-8') + b'\r\n')
                time.sleep(0.1)
            except Exception as e:
                print("Illegal value for network address " + str(e))
            
            #Set TX power
            try:
                value = w.Combobox_TXPower.current() + 2
                value = (b'AT+TXPOWER=' + str(value).encode('utf-8') + b'\r\n')
                ser.write(value)
            except Exception as e:
                print("Error in setting TX power " + str(e))
                
            #Set RF Channel
            try:
                value = w.Combobox_RFCH.current() + 1
                value = (b'AT+RFCH=' + str(value).encode('utf-8') + b'\r\n')
                ser.write(value)
            except Exception as e:
                print("Error in setting RF channel " + str(e))
                
            #Set the hop count
            try:
                global HopCount_Text
                value = HopCount_Text.get()[0:3]
                int(value)
                #Code reached here so the value must be valid                 
                ser.write(b'AT+HOPS=' + value.encode('utf-8') + b'\r\n')
                time.sleep(0.1)
            except Exception as e:
                print("Illegal value for Hop count " + str(e))
                
            #Set RSSI CAD threshold
            try:
                global RSSILevel_Text
                value = RSSILevel_Text.get()[0:4]
                int(value)
                #Code reached here so the value must be valid                 
                ser.write(b'AT+CADRSSI=' + value.encode('utf-8') + b'\r\n')
                time.sleep(0.1)
            except Exception as e:
                print("Illegal value for CAD RSSI threshold " + str(e))
                
            #Set the AES Encryption key
            try:
                global AES_Text
                value = AES_Text.get()[0:32]
                AES_Text.set('Value Hidden')
                #Code reached here so the value must be valid  
                if(len(value) == 32):
                    ser.write(b'AT+AESKEY=' + value.encode('utf-8') + b'\r\n')
                    time.sleep(0.1)
            except Exception as e:
                print("Illegal value for AES key " + str(e))
            ser.reset_input_buffer()    
    except Exception as e:
        print("Error in saving new settings " + str(e))
    sys.stdout.flush()

def readData():
    global w, top_level, root
    try:
        #Get current COM port selected
        global Combobox_COMText
        port = Combobox_COMText.get()        
        #Create a serial object
        with serial.Serial(port, 19200, parity=serial.PARITY_EVEN, timeout = 0.25) as ser:
            #common io object for read line
            ser.reset_input_buffer()
            #read network address
            ser.write(b'AT+NADDR?\r\n')                
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)            
            global NADDR_Text
            NADDR_Text.set(result)                       
            
            #read TX power
            ser.write(b'AT+TXPOWER?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            w.Combobox_TXPower.current(int(result) - 2)              

            #read radio mode
            ser.write(b'AT+MODE?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            global mode_Text
            mode_Text.set(result)

            #read RF channel
            ser.write(b'AT+RFCH?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)            
            w.Combobox_RFCH.current(int(result) - 1)

            #read Hop Count
            ser.write(b'AT+HOPS?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1) 
            global HopCount_Text            
            HopCount_Text.set(result)

            #Read current CAD counter
            ser.write(b'AT+CADCOUNTER?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            global CADCounter_Text
            CADCounter_Text.set(result)

            #Read RSSI CAD Level
            ser.write(b'AT+CADRSSI?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            global RSSILevel_Text
            RSSILevel_Text.set(result)            

            #Read MAC ID
            ser.write(b'AT+MAC?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            global MAC_Text
            MAC_Text.set(result)

            #Read the Network Short ID
            ser.write(b'AT+ADDR?\r\n')
            result = re.search('%s(.*)%s' % ("=", "\r"), ser.read_until().decode('utf-8')).group(1)
            global ADDR_Text
            ADDR_Text.set(result)

            #Read the Firmware and AT Command version
            ser.write(b'AT+I\r\n')
            result = ser.read_until().decode('utf-8')
            result = ser.read_until().decode('utf-8')
            global Firmware_Text
            Firmware_Text.set(result.split(' ')[3].replace('\r','').replace('\n',''))
            result = ser.read_until().decode('utf-8')
            global ATSet_Text
            ATSet_Text.set(result.split(' ')[2].replace('\r','').replace('\n',''))
            
    except Exception as e:
        print("Error in loading values from selected device" + str(e))
        
    sys.stdout.flush()

def set_Tk_var():    
    global Combobox_COMText
    Combobox_COMText = tk.StringVar()
    global combobox_TXpowerText
    combobox_TXpowerText = tk.StringVar()
    global NADDR_Text
    NADDR_Text = tk.StringVar()    
    global mode_Text
    mode_Text = tk.StringVar()
    mode_Text.set('Unknown')
    global combobox_RFChannel
    combobox_RFChannel = tk.StringVar()    
    global HopCount_Text
    HopCount_Text = tk.StringVar()    
    global CADCounter_Text
    CADCounter_Text = tk.StringVar()
    CADCounter_Text.set('Unknown')
    global RSSILevel_Text
    RSSILevel_Text = tk.StringVar()    
    global AES_Text
    AES_Text = tk.StringVar()    
    global MAC_Text
    MAC_Text = tk.StringVar()
    MAC_Text.set('Unknown')
    global ADDR_Text
    ADDR_Text = tk.StringVar()
    ADDR_Text.set('Unknown')
    global Firmware_Text
    Firmware_Text = tk.StringVar()
    Firmware_Text.set('Unknown')
    global ATSet_Text
    ATSet_Text = tk.StringVar()
    ATSet_Text.set('Unknown')
    global RXTXShortID
    RXTXShortID = tk.StringVar()    
    global Packet
    Packet = tk.StringVar()
    global bl_version_number
    bl_version_number = tk.StringVar()
    bl_version_number.set('')

def refreshCOMPorts():
    global w, top_level, root
    try:
        global combobox_COM        
        w.Combobox_COM['values'] = [str(comport.device) for comport in serial.tools.list_ports.comports()]
        w.Combobox_COM.current(0)
    except Exception as e:
        print("Error in finding COM ports " + str(e))
    sys.stdout.flush()

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    #Init GUI components
    w.Combobox_TXPower['values'] = ["2 dBm","3 dBm","4 dBm","5 dBm","6 dBm","7 dBm","8 dBm","9 dBm","10 dBm","11 dBm","12 dBm","13 dBm","14 dBm","15 dBm","16 dBm","17 dBm"]
    w.Combobox_RFCH['values'] = ["1: 906MHz","2: 908MHz","3: 910MHz","4: 912MHz","5: 914MHz","6: 916MHz","7: 918MHz","8: 920MHz","9: 922MHz","10: 924MHz"]
    

def destroy_window():
    # Function which closes the window.
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import xTendLoRaApp
    xTendLoRaApp.vp_start_gui()




